import numpy as np
from scipy.stats import norm


class baysian:

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.labels = set(self.y)
        self.mean = np.mean(x, axis=0)
        self.std = np.std(x, axis=0)
        self.std_label = np.zeros((len(self.labels), x.shape[1]))
        self.mean_label = np.zeros((len(self.labels), x.shape[1]))
        self.prior = np.zeros(len(self.labels),)

    def fit(self):

        for i in self.labels:
            label = np.where(self.y == i)
            label = self.x[label]

            self.prior[i] = label[0].shape[0] / float(self.y.shape[0])
            self.std_label[i] = np.std(label, axis=0)
            self.mean_label[i] = np.mean(label, axis=0)

        return self.std_label, self.mean_label, self.prior



    def predict(self, x_test):

        p = np.empty(0)
        for obs in x_test:
            evidence = norm.pdf((self.mean - obs) / self.std)
            evidence = np.prod(evidence)
            likelihood = norm.pdf((obs - self.mean_label) / self.std_label)
            likelihood = np.prod(likelihood, axis=1)

            posterior = self.prior * likelihood / evidence
            p = np.append(p, np.argmax(posterior))

        return p.astype(int)



    def score(self, x_test, y_test):
        y_pred = self.predict(x_test)
        score = (y_pred == y_test).sum() * 100 / len(y_test)
        return score


x = np.array([[5.1, 3.5, 1.4, 0.2],
              [4.9, 3., 1.4, 0.2],
              [4.7, 3.2, 1.3, 0.2],
              [4.6, 3.1, 1.5, 0.2],
              [5., 3.6, 1.4, 0.2],
              [5.4, 3.9, 1.7, 0.4],
              [4.6, 3.4, 1.4, 0.3],
              [5., 3.4, 1.5, 0.2],
              [4.4, 2.9, 1.4, 0.2],
              [4.9, 3.1, 1.5, 0.1],
              [5.4, 3.7, 1.5, 0.2],
              [4.8, 3.4, 1.6, 0.2],
              [4.8, 3., 1.4, 0.1],
              [4.3, 3., 1.1, 0.1],
              [5.8, 4., 1.2, 0.2],
              [5.7, 4.4, 1.5, 0.4],
              [5.4, 3.9, 1.3, 0.4],
              [5.1, 3.5, 1.4, 0.3],
              [5.7, 3.8, 1.7, 0.3],
              [5.1, 3.8, 1.5, 0.3],
              [5.4, 3.4, 1.7, 0.2],
              [5.1, 3.7, 1.5, 0.4],
              [4.6, 3.6, 1., 0.2],
              [5.1, 3.3, 1.7, 0.5],
              [4.8, 3.4, 1.9, 0.2],
              [5., 3., 1.6, 0.2],
              [5., 3.4, 1.6, 0.4],
              [5.2, 3.5, 1.5, 0.2],
              [5.2, 3.4, 1.4, 0.2],
              [4.7, 3.2, 1.6, 0.2],
              [4.8, 3.1, 1.6, 0.2],
              [5.4, 3.4, 1.5, 0.4],
              [5.2, 4.1, 1.5, 0.1],
              [5.5, 4.2, 1.4, 0.2],
              [4.9, 3.1, 1.5, 0.1],
              [5., 3.2, 1.2, 0.2],
              [5.5, 3.5, 1.3, 0.2],
              [4.9, 3.1, 1.5, 0.1],
              [4.4, 3., 1.3, 0.2],
              [5.1, 3.4, 1.5, 0.2],
              [5., 3.5, 1.3, 0.3],
              [4.5, 2.3, 1.3, 0.3],
              [4.4, 3.2, 1.3, 0.2],
              [5., 3.5, 1.6, 0.6],
              [5.1, 3.8, 1.9, 0.4],
              [4.8, 3., 1.4, 0.3],
              [5.1, 3.8, 1.6, 0.2],
              [4.6, 3.2, 1.4, 0.2],
              [5.3, 3.7, 1.5, 0.2],
              [5., 3.3, 1.4, 0.2],
              [7., 3.2, 4.7, 1.4],
              [6.4, 3.2, 4.5, 1.5],
              [6.9, 3.1, 4.9, 1.5],
              [5.5, 2.3, 4., 1.3],
              [6.5, 2.8, 4.6, 1.5],
              [5.7, 2.8, 4.5, 1.3],
              [6.3, 3.3, 4.7, 1.6],
              [4.9, 2.4, 3.3, 1.],
              [6.6, 2.9, 4.6, 1.3],
              [5.2, 2.7, 3.9, 1.4],
              [5., 2., 3.5, 1.],
              [5.9, 3., 4.2, 1.5],
              [6., 2.2, 4., 1.],
              [6.1, 2.9, 4.7, 1.4],
              [5.6, 2.9, 3.6, 1.3],
              [6.7, 3.1, 4.4, 1.4],
              [5.6, 3., 4.5, 1.5],
              [5.8, 2.7, 4.1, 1.],
              [6.2, 2.2, 4.5, 1.5],
              [5.6, 2.5, 3.9, 1.1],
              [5.9, 3.2, 4.8, 1.8],
              [6.1, 2.8, 4., 1.3],
              [6.3, 2.5, 4.9, 1.5],
              [6.1, 2.8, 4.7, 1.2],
              [6.4, 2.9, 4.3, 1.3],
              [6.6, 3., 4.4, 1.4],
              [6.8, 2.8, 4.8, 1.4],
              [6.7, 3., 5., 1.7],
              [6., 2.9, 4.5, 1.5],
              [5.7, 2.6, 3.5, 1.],
              [5.5, 2.4, 3.8, 1.1],
              [5.5, 2.4, 3.7, 1.],
              [5.8, 2.7, 3.9, 1.2],
              [6., 2.7, 5.1, 1.6],
              [5.4, 3., 4.5, 1.5],
              [6., 3.4, 4.5, 1.6],
              [6.7, 3.1, 4.7, 1.5],
              [6.3, 2.3, 4.4, 1.3],
              [5.6, 3., 4.1, 1.3],
              [5.5, 2.5, 4., 1.3],
              [5.5, 2.6, 4.4, 1.2],
              [6.1, 3., 4.6, 1.4],
              [5.8, 2.6, 4., 1.2],
              [5., 2.3, 3.3, 1.],
              [5.6, 2.7, 4.2, 1.3],
              [5.7, 3., 4.2, 1.2],
              [5.7, 2.9, 4.2, 1.3],
              [6.2, 2.9, 4.3, 1.3],
              [5.1, 2.5, 3., 1.1],
              [5.7, 2.8, 4.1, 1.3]])
y = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])



b = baysian(x[:90], y[:90])
b.fit()

print(b.predict(x).sum())
